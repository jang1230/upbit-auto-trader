"""
Binance-Style Strategy Backtest Runner
Î∞îÏù¥ÎÇ∏Ïä§ Ïä§ÌÉÄÏùº Ï†ÑÎûµ Î∞±ÌÖåÏä§Ìä∏ Ïã§ÌñâÍ∏∞

5Í∞ÄÏßÄ Ïù¥ÏÉÅÏùò Îß§ÎèÑ Ï°∞Í±¥ÏúºÎ°ú Î∞±ÌÖåÏä§Ìä∏:
1. Í≥†Ï†ï ÏùµÏ†à (3%, 5%, 7%)
2. Í≥†Ï†ï ÏÜêÏ†à (-3%, -5%, -7%)
3. Ìä∏Î†àÏùºÎßÅ Ïä§ÌÜ±
4. Î©ÄÌã∞Î†àÎ≤® ÏùµÏ†à (DCA Ïä§ÌÉÄÏùº)
5. ÏãúÍ∞Ñ Í∏∞Î∞ò Îß§ÎèÑ
"""

import pandas as pd
import numpy as np
from pathlib import Path
from datetime import datetime, timedelta
import sys
from typing import Dict, List, Tuple
import json

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from core.strategies.binance_multi_signal_strategy import BinanceMultiSignalStrategy


class ExitCondition:
    """Îß§ÎèÑ Ï°∞Í±¥ Î≤†Ïù¥Ïä§ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, name: str):
        self.name = name
    
    def should_exit(
        self,
        entry_price: float,
        current_price: float,
        highest_price: float,
        entry_time: datetime,
        current_time: datetime
    ) -> bool:
        """Îß§ÎèÑ Ïó¨Î∂Ä ÌåêÎã®"""
        raise NotImplementedError


class FixedProfitTarget(ExitCondition):
    """Í≥†Ï†ï ÏùµÏ†à Ï°∞Í±¥"""
    
    def __init__(self, target_pct: float):
        super().__init__(f"FixedTP_{target_pct}%")
        self.target_pct = target_pct
    
    def should_exit(self, entry_price, current_price, highest_price, entry_time, current_time):
        profit_pct = ((current_price - entry_price) / entry_price) * 100
        return profit_pct >= self.target_pct


class FixedStopLoss(ExitCondition):
    """Í≥†Ï†ï ÏÜêÏ†à Ï°∞Í±¥"""
    
    def __init__(self, stop_pct: float):
        super().__init__(f"FixedSL_{abs(stop_pct)}%")
        self.stop_pct = stop_pct
    
    def should_exit(self, entry_price, current_price, highest_price, entry_time, current_time):
        loss_pct = ((current_price - entry_price) / entry_price) * 100
        return loss_pct <= self.stop_pct


class TrailingStop(ExitCondition):
    """Ìä∏Î†àÏùºÎßÅ Ïä§ÌÜ± Ï°∞Í±¥"""
    
    def __init__(self, trail_pct: float):
        super().__init__(f"Trailing_{trail_pct}%")
        self.trail_pct = trail_pct
    
    def should_exit(self, entry_price, current_price, highest_price, entry_time, current_time):
        if highest_price <= entry_price:
            return False  # ÏïÑÏßÅ ÏàòÏùµ ÏïàÎÇ®
        
        drawdown_from_peak = ((current_price - highest_price) / highest_price) * 100
        return drawdown_from_peak <= -self.trail_pct


class MultiLevelTakeProfit(ExitCondition):
    """Î©ÄÌã∞Î†àÎ≤® ÏùµÏ†à (DCA Ïä§ÌÉÄÏùº)"""
    
    def __init__(self, levels: List[Tuple[float, float]]):
        """
        Args:
            levels: [(ÏùµÏ†àÎ•†, ÎπÑÏ§ë), ...]
            Ïòà: [(3, 0.3), (5, 0.5), (7, 1.0)]  # 3%Ïóê 30%, 5%Ïóê 50%, 7%Ïóê Ï†ÑÎ∂Ä
        """
        super().__init__(f"MultiTP_{len(levels)}L")
        self.levels = sorted(levels, key=lambda x: x[0])  # ÎÇÆÏùÄ ÏùµÏ†àÎ•†Î∂ÄÌÑ∞
        self.current_level = 0
    
    def should_exit(self, entry_price, current_price, highest_price, entry_time, current_time):
        profit_pct = ((current_price - entry_price) / entry_price) * 100
        
        if self.current_level >= len(self.levels):
            return True  # Î™®Îëê Îß§ÎèÑ ÏôÑÎ£å
        
        target_pct, _ = self.levels[self.current_level]
        if profit_pct >= target_pct:
            self.current_level += 1
            return self.current_level >= len(self.levels)  # ÎßàÏßÄÎßâ Î†àÎ≤®Ïù¥Î©¥ Ï†ÑÎ∂Ä Îß§ÎèÑ
        
        return False
    
    def reset(self):
        """ÏÉà Ìè¨ÏßÄÏÖò ÏãúÏûë Ïãú Î†àÎ≤® Ï¥àÍ∏∞Ìôî"""
        self.current_level = 0


class TimeBasedExit(ExitCondition):
    """ÏãúÍ∞Ñ Í∏∞Î∞ò Îß§ÎèÑ"""
    
    def __init__(self, hours: int):
        super().__init__(f"TimeExit_{hours}h")
        self.max_hours = hours
    
    def should_exit(self, entry_price, current_price, highest_price, entry_time, current_time):
        holding_time = (current_time - entry_time).total_seconds() / 3600
        return holding_time >= self.max_hours


class CombinedExit(ExitCondition):
    """Ï°∞Ìï© Îß§ÎèÑ Ï°∞Í±¥ (ÏùµÏ†à OR ÏÜêÏ†à)"""
    
    def __init__(self, tp_pct: float, sl_pct: float):
        super().__init__(f"TP{tp_pct}%_SL{abs(sl_pct)}%")
        self.tp = FixedProfitTarget(tp_pct)
        self.sl = FixedStopLoss(sl_pct)
    
    def should_exit(self, entry_price, current_price, highest_price, entry_time, current_time):
        return (
            self.tp.should_exit(entry_price, current_price, highest_price, entry_time, current_time) or
            self.sl.should_exit(entry_price, current_price, highest_price, entry_time, current_time)
        )


class BinanceStrategyBacktest:
    """Î∞îÏù¥ÎÇ∏Ïä§ Ï†ÑÎûµ Î∞±ÌÖåÏä§Ìä∏ Ïã§ÌñâÍ∏∞"""
    
    def __init__(
        self,
        data_dir: str = "data/historical",
        results_dir: str = "backtest_results"
    ):
        self.data_dir = Path(data_dir)
        self.results_dir = Path(results_dir)
        self.results_dir.mkdir(parents=True, exist_ok=True)
        
        # Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî
        self.strategy = BinanceMultiSignalStrategy(
            rsi_oversold=40.0,
            bb_proximity_pct=1.0,
            stoch_overbought=80.0,
            require_all_signals=False  # OR Ï°∞Í±¥
        )
    
    def load_data(self, symbol: str) -> pd.DataFrame:
        """CSV Îç∞Ïù¥ÌÑ∞ Î°úÎìú"""
        # Find matching CSV file
        csv_files = list(self.data_dir.glob(f"{symbol}_minute1_*.csv"))
        
        if not csv_files:
            raise FileNotFoundError(f"{symbol} Îç∞Ïù¥ÌÑ∞ ÌååÏùº ÏóÜÏùå")
        
        csv_file = csv_files[0]  # Ï≤´ Î≤àÏß∏ ÌååÏùº ÏÇ¨Ïö©
        print(f"üìÇ Î°úÎìú: {csv_file.name}")
        
        df = pd.read_csv(csv_file)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df.set_index('timestamp', inplace=True)
        
        return df
    
    def run_single_backtest(
        self,
        df: pd.DataFrame,
        exit_condition: ExitCondition,
        initial_capital: float = 1_000_000  # Ï¥àÍ∏∞ ÏûêÎ≥∏ 100ÎßåÏõê
    ) -> Dict:
        """Îã®Ïùº Îß§ÎèÑ Ï°∞Í±¥ÏúºÎ°ú Î∞±ÌÖåÏä§Ìä∏"""
        
        capital = initial_capital
        position = 0  # Î≥¥Ïú† ÏàòÎüâ
        entry_price = 0
        entry_time = None
        highest_price = 0
        
        trades = []
        equity_curve = []
        
        for i in range(len(df)):
            current_time = df.index[i]
            current_price = df['close'].iloc[i]
            
            # Ìè¨ÏßÄÏÖò ÏóÜÏùÑ Îïå: Îß§Ïàò ÏãúÍ∑∏ÎÑê Ï≤¥ÌÅ¨
            if position == 0:
                signal_df = df.iloc[:i+1]  # ÌòÑÏû¨ÍπåÏßÄÏùò Îç∞Ïù¥ÌÑ∞
                signal = self.strategy.generate_signal(signal_df)
                
                if signal == 'buy' and capital > 0:
                    # Îß§Ïàò Ïã§Ìñâ
                    position = capital / current_price
                    entry_price = current_price
                    entry_time = current_time
                    highest_price = current_price
                    capital = 0
                    
                    trades.append({
                        'entry_time': entry_time,
                        'entry_price': entry_price,
                        'action': 'BUY'
                    })
            
            # Ìè¨ÏßÄÏÖò ÏûàÏùÑ Îïå: Îß§ÎèÑ Ï°∞Í±¥ Ï≤¥ÌÅ¨
            elif position > 0:
                highest_price = max(highest_price, current_price)
                
                should_sell = exit_condition.should_exit(
                    entry_price, current_price, highest_price, entry_time, current_time
                )
                
                if should_sell:
                    # Îß§ÎèÑ Ïã§Ìñâ
                    capital = position * current_price
                    profit_pct = ((current_price - entry_price) / entry_price) * 100
                    
                    trades[-1].update({
                        'exit_time': current_time,
                        'exit_price': current_price,
                        'profit_pct': profit_pct,
                        'profit_krw': capital - initial_capital,
                        'action': 'SELL'
                    })
                    
                    position = 0
                    entry_price = 0
                    
                    # MultiLevelTakeProfitÏùò Í≤ΩÏö∞ Î†àÎ≤® Î¶¨ÏÖã
                    if hasattr(exit_condition, 'reset'):
                        exit_condition.reset()
            
            # ÏûêÏÇ∞ Í∞ÄÏπò Ï∂îÏ†Å
            current_equity = capital + (position * current_price if position > 0 else 0)
            equity_curve.append({
                'timestamp': current_time,
                'equity': current_equity
            })
        
        # ÏµúÏ¢Ö Ìè¨ÏßÄÏÖò Ï†ïÎ¶¨ (Î≥¥Ïú† Ï§ëÏù¥Î©¥ ÎßàÏßÄÎßâ Í∞ÄÍ≤©Ïóê Îß§ÎèÑ)
        if position > 0:
            final_price = df['close'].iloc[-1]
            capital = position * final_price
            profit_pct = ((final_price - entry_price) / entry_price) * 100
            
            trades[-1].update({
                'exit_time': df.index[-1],
                'exit_price': final_price,
                'profit_pct': profit_pct,
                'profit_krw': capital - initial_capital,
                'action': 'SELL'
            })
        
        # Í≤∞Í≥º Î∂ÑÏÑù
        trades_df = pd.DataFrame(trades)
        completed_trades = trades_df[trades_df['action'] == 'SELL']
        
        if len(completed_trades) == 0:
            return {
                'exit_condition': exit_condition.name,
                'total_trades': 0,
                'win_rate': 0,
                'avg_profit': 0,
                'total_return': 0,
                'final_capital': capital
            }
        
        win_trades = completed_trades[completed_trades['profit_pct'] > 0]
        loss_trades = completed_trades[completed_trades['profit_pct'] <= 0]
        
        result = {
            'exit_condition': exit_condition.name,
            'total_trades': len(completed_trades),
            'win_trades': len(win_trades),
            'loss_trades': len(loss_trades),
            'win_rate': (len(win_trades) / len(completed_trades)) * 100 if len(completed_trades) > 0 else 0,
            'avg_profit': completed_trades['profit_pct'].mean(),
            'avg_win': win_trades['profit_pct'].mean() if len(win_trades) > 0 else 0,
            'avg_loss': loss_trades['profit_pct'].mean() if len(loss_trades) > 0 else 0,
            'max_profit': completed_trades['profit_pct'].max(),
            'max_loss': completed_trades['profit_pct'].min(),
            'total_return': ((capital - initial_capital) / initial_capital) * 100,
            'final_capital': capital,
            'sharpe_ratio': self._calculate_sharpe(equity_curve) if len(equity_curve) > 0 else 0
        }
        
        return result
    
    def _calculate_sharpe(self, equity_curve: List[Dict]) -> float:
        """ÏÉ§ÌîÑ ÎπÑÏú® Í≥ÑÏÇ∞ (Í∞ÑÎã® Î≤ÑÏ†Ñ)"""
        if len(equity_curve) < 2:
            return 0
        
        equity_df = pd.DataFrame(equity_curve)
        returns = equity_df['equity'].pct_change().dropna()
        
        if len(returns) == 0 or returns.std() == 0:
            return 0
        
        return (returns.mean() / returns.std()) * np.sqrt(365 * 24 * 60)  # 1Î∂ÑÎ¥â Í∏∞Ï§Ä Ïó∞Ïú®Ìôî
    
    def run_all_backtests(
        self,
        symbols: List[str] = ['KRW-BTC', 'KRW-ETH', 'KRW-XRP']
    ):
        """Î™®Îì† ÏΩîÏù∏, Î™®Îì† Îß§ÎèÑ Ï°∞Í±¥ÏúºÎ°ú Î∞±ÌÖåÏä§Ìä∏"""
        
        # Îß§ÎèÑ Ï°∞Í±¥ Ï†ïÏùò (5Í∞ÄÏßÄ Ïù¥ÏÉÅ)
        exit_conditions = [
            # 1. Í≥†Ï†ï ÏùµÏ†à/ÏÜêÏ†à Ï°∞Ìï©
            CombinedExit(tp_pct=3, sl_pct=-3),
            CombinedExit(tp_pct=5, sl_pct=-3),
            CombinedExit(tp_pct=7, sl_pct=-5),
            
            # 2. Ìä∏Î†àÏùºÎßÅ Ïä§ÌÜ±
            TrailingStop(trail_pct=2),
            TrailingStop(trail_pct=3),
            
            # 3. ÏãúÍ∞Ñ Í∏∞Î∞ò
            TimeBasedExit(hours=24),
            TimeBasedExit(hours=48),
            
            # 4. Î©ÄÌã∞Î†àÎ≤® ÏùµÏ†à
            MultiLevelTakeProfit(levels=[(3, 0.5), (5, 1.0)]),
            MultiLevelTakeProfit(levels=[(2, 0.3), (5, 0.7), (10, 1.0)]),
        ]
        
        all_results = []
        
        print(f"\n{'='*80}")
        print(f"üéØ Î∞îÏù¥ÎÇ∏Ïä§ Ï†ÑÎûµ Î∞±ÌÖåÏä§Ìä∏ ÏãúÏûë")
        print(f"ÏΩîÏù∏: {', '.join(symbols)}")
        print(f"Îß§ÎèÑ Ï°∞Í±¥: {len(exit_conditions)}Í∞ÄÏßÄ")
        print(f"{'='*80}\n")
        
        for symbol in symbols:
            print(f"\nüìä {symbol} Î∞±ÌÖåÏä§Ìä∏ ÏãúÏûë...")
            
            try:
                df = self.load_data(symbol)
                print(f"   Îç∞Ïù¥ÌÑ∞: {len(df):,}Í∞ú Ï∫îÎì§ ({df.index[0]} ~ {df.index[-1]})")
                
                for idx, exit_cond in enumerate(exit_conditions, 1):
                    print(f"   [{idx}/{len(exit_conditions)}] {exit_cond.name}...", end=' ', flush=True)
                    
                    result = self.run_single_backtest(df, exit_cond)
                    result['symbol'] = symbol
                    all_results.append(result)
                    
                    print(f"‚úÖ ÏàòÏùµÎ•†: {result['total_return']:+.2f}%, ÏäπÎ•†: {result['win_rate']:.1f}%, Í±∞Îûò: {result['total_trades']}Ìöå")
                
                print(f"‚úÖ {symbol} ÏôÑÎ£å!")
                
            except Exception as e:
                print(f"‚ùå {symbol} Ïã§Ìå®: {e}")
                continue
        
        # Í≤∞Í≥º Ï†ÄÏû•
        self._save_results(all_results)
        self._print_summary(all_results)
    
    def _save_results(self, results: List[Dict]):
        """Í≤∞Í≥º CSV Ï†ÄÏû•"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"binance_strategy_results_{timestamp}.csv"
        filepath = self.results_dir / filename
        
        df = pd.DataFrame(results)
        df.to_csv(filepath, index=False, encoding='utf-8-sig')
        
        print(f"\nüíæ Í≤∞Í≥º Ï†ÄÏû•: {filepath}")
        print(f"   ÌÅ¨Í∏∞: {filepath.stat().st_size / 1024:.1f}KB")
    
    def _print_summary(self, results: List[Dict]):
        """Í≤∞Í≥º ÏöîÏïΩ Ï∂úÎ†•"""
        df = pd.DataFrame(results)
        
        print(f"\n{'='*80}")
        print(f"üìä Î∞±ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏöîÏïΩ")
        print(f"{'='*80}\n")
        
        # ÏΩîÏù∏Î≥Ñ ÏµúÍ≥† ÏàòÏùµÎ•†
        print("üèÜ ÏΩîÏù∏Î≥Ñ ÏµúÍ≥† ÏàòÏùµÎ•†:")
        for symbol in df['symbol'].unique():
            symbol_df = df[df['symbol'] == symbol]
            best = symbol_df.loc[symbol_df['total_return'].idxmax()]
            print(f"   {symbol}: {best['total_return']:.2f}% ({best['exit_condition']})")
        
        print()
        
        # Îß§ÎèÑ Ï°∞Í±¥Î≥Ñ ÌèâÍ∑† ÏàòÏùµÎ•†
        print("üìà Îß§ÎèÑ Ï°∞Í±¥Î≥Ñ ÌèâÍ∑† ÏàòÏùµÎ•†:")
        avg_by_exit = df.groupby('exit_condition')['total_return'].mean().sort_values(ascending=False)
        for exit_name, avg_return in avg_by_exit.items():
            print(f"   {exit_name}: {avg_return:.2f}%")
        
        print()
        
        # Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ
        print("üìä Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ:")
        print(f"   ÌèâÍ∑† ÏàòÏùµÎ•†: {df['total_return'].mean():.2f}%")
        print(f"   ÏµúÍ≥† ÏàòÏùµÎ•†: {df['total_return'].max():.2f}%")
        print(f"   ÏµúÏ†Ä ÏàòÏùµÎ•†: {df['total_return'].min():.2f}%")
        print(f"   ÌèâÍ∑† ÏäπÎ•†: {df['win_rate'].mean():.1f}%")
        print(f"   ÌèâÍ∑† Í±∞Îûò ÌöüÏàò: {df['total_trades'].mean():.0f}Ìöå")
        
        print(f"\n{'='*80}\n")


if __name__ == "__main__":
    backtest = BinanceStrategyBacktest()
    backtest.run_all_backtests()
